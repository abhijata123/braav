/*
  # Create Vetting Table

  1. New Tables
    - `Vetting_Table`
      - `id` (bigint, primary key)
      - `userId` (text, unique, user's email)
      - `status` (boolean, approval status)
      - `submitted_at` (timestamp, when request was made)
      - `approved_at` (timestamp, when approved)
      - `vetting_data` (jsonb, additional data for approved users)

  2. Security
    - Enable RLS on `Vetting_Table`
    - Add policy for users to view their own vetting status
    - Add policy for users to insert their own vetting request
*/

CREATE TABLE IF NOT EXISTS public.Vetting_Table (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  userId text UNIQUE NOT NULL,
  status boolean DEFAULT FALSE NOT NULL,
  submitted_at timestamp with time zone DEFAULT now() NOT NULL,
  approved_at timestamp with time zone,
  vetting_data jsonb
);

ALTER TABLE public.Vetting_Table ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own vetting status"
ON public.Vetting_Table FOR SELECT
USING (userId = (jwt() ->> 'email'::text));

CREATE POLICY "Users can insert their own vetting request"
ON public.Vetting_Table FOR INSERT
WITH CHECK (userId = (jwt() ->> 'email'::text));

-- Create index for better performance
CREATE INDEX IF NOT EXISTS idx_vetting_table_userid ON public.Vetting_Table(userId);
CREATE INDEX IF NOT EXISTS idx_vetting_table_status ON public.Vetting_Table(status);